[
  { "name": "require_auth", "description": "Verifies that the account has permission to execute the action" },
  { "name": "emplace", "description": "Adds a new record to a table" },
  { "name": "modify", "description": "Modifies an existing record in a table" },
  { "name": "ACTION", "description": "Macro to define an action in a smart contract" },
  { "name": "TABLE", "description": "Macro to define a table in a smart contract" },
  { "name": "get_self", "description": "Returns the account name of the current contract" },
  { "name": "get_self()", "description": "Function call to get the account name of the current contract" },
  { "name": "find", "description": "Searches for a record in a table" },
  { "name": "vector", "description": "Container that encapsulates dynamic size arrays" },
  { "name": "require_find", "description": "Searches for a record and throws an error if not found" },
  { "name": "symbol", "description": "Represents a token symbol" },
  { "name": "check", "description": "Asserts a condition and throws an error if false" },
  { "name": "asset", "description": "Represents a fixed-point asset with amount and symbol" },
  { "name": "name", "description": "Represents an account name" },
  { "name": "eosio::name", "description": "Fully qualified name type" },
  { "name": "multi_index", "description": "Container for storing and retrieving objects from EOSIO database" },
  { "name": "CONTRACT", "description": "Macro to define a contract class" },
  { "name": "EOSIO_DISPATCH", "description": "Macro to dispatch actions to their respective handlers" },
  { "name": "print", "description": "Prints a string to the console" },
  { "name": "require_recipient", "description": "Adds an account to the list of notified accounts for the action" },
  { "name": "has_auth", "description": "Checks if the account has authorization to execute the current action" },
  { "name": "is_account", "description": "Checks if the account name exists on the blockchain" },
  { "name": "permission_level", "description": "Represents the level of permission needed for an action" },
  { "name": "current_time", "description": "Returns the current time point" },
  { "name": "tapos_block_prefix", "description": "Returns the block prefix used for TAPOS (Transaction as Proof of Stake)" },
  { "name": "tapos_block_num", "description": "Returns the block number used for TAPOS" },
  { "name": "eosio_assert", "description": "Asserts a condition and throws an error with a custom message if false" },
  { "name": "send_inline", "description": "Sends an inline action" },
  { "name": "send_context_free_inline", "description": "Sends a context-free inline action" },
  { "name": "require_auth2", "description": "Verifies that the account has a specific permission to execute the action" }
]
